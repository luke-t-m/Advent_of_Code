# The bulk of this code was generated by chatgpt, using the problem as a prompt.

lines = open('input').readlines()

# Initialize the sum of priorities to 0
sum_priorities = 0

# Loop through each line
for line in lines:
    # Split the line into the two compartments
    comp1 = line[:len(line) // 2]
    comp2 = line[len(line) // 2:]

    # Create sets for each compartment
    set1 = set(comp1)
    set2 = set(comp2)

    # Find the common item type in both compartments
    common = set1 & set2

    # Convert the common item type to its ASCII value and subtract 96 to get the priority
    shared = common.pop()
    try: priority = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".index(shared) + 27
    except: priority = "abcdefghijklmnopqrstuvwxyz".index(shared) + 1

    # Add the priority to the sum of priorities
    sum_priorities += priority

# Print the sum of priorities
print(sum_priorities)

# Open the file containing the rucksack contents
with open('input') as f:
    # Read the lines of the file into a list
    lines = f.readlines()
    
# Create an empty list to store the common item types
common_items = []

# Loop over the lines in groups of three
for i in range(0, len(lines), 3):
    # Create an empty set for each group
    common = set()
    # Loop over the lines in the group
    for j in range(i, i + 3):
        # Add the items from each line to the set
        common.update(set(lines[j]))
    # Find the common items between all three lines
    common_items.append(common.intersection(*[set(line) for line in lines[i:i + 3]]))
    
# Calculate the sum of the priorities of the common items
priority_sum = 0
for item in common_items:
    # Convert the item to lowercase and calculate its priority
    print(item)
    for shared in item:
        if shared != "\n": break
    print(shared)
    try:
        print(shared)
        priority = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".index(shared) + 27
    except: priority = "abcdefghijklmnopqrstuvwxyz".index(shared) + 1
    priority_sum += priority
    
# Print the sum of the priorities
print(priority_sum)